service: serverless-example

plugins:
  - serverless-offline
  - serverless-offline-watcher
  - serverless-plugin-common-excludes
  - serverless-plugin-include-dependencies

useDotenv: true

custom:
  serverless-offline-watcher:
    - path:
        - dist/
      command: node -e "console.log('modified', new Date())"
  warmup:
    default:
      enabled: true

package:
  patterns:
    - 'node_modules/aws4/**'
  excludeDevDependencies: false
  exclude:
    - apps/**
    - libs/**
    - nodemon.json

provider:
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 's3:*'
            - 's3-object-lambda:*'
          Resource: ${env:S3_ARN}
        - Effect: Allow
          Action:
            - 'logs:CreateLogStream'
            - 'logs:CreateLogGroup'
          Resource:
            - arn:aws:logs:us-east-1:632791012032:log-group:/aws/lambda/production-main:*
            - arn:aws:logs:us-east-1:632791012032:log-group:/aws/lambda/production-blog:*
        - Effect: Allow
          Action:
            - 'logs:PutLogEvents'
          Resource:
            - arn:aws:logs:us-east-1:632791012032:log-group:/aws/lambda/production-main:*:*
            - arn:aws:logs:us-east-1:632791012032:log-group:/aws/lambda/production-blog:*:*

  stage: ${opt:stage, 'production'}
  name: aws
  runtime: nodejs16.x
  environment:
    SLS_PUBLIC_API_URL: !Join
      - ''
      - - 'https://'
        - !Ref ApiGatewayRestApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .
        - !Ref 'AWS::URLSuffix'
        - /
        - ${self:provider.stage}
        - /api
    SLS_API_URL: ''
    MONGO_CLUSTER: ${env:MONGO_CLUSTER}
    MONGO_USERNAME: ${env:MONGO_USERNAME}
    MONGO_PASSWORD: ${env:MONGO_PASSWORD}
    MONGO_PASSWORD_PREFIX: ${env:MONGO_PASSWORD_PREFIX}
    NEXT_PUBLIC_URL: ${env:NEXT_PUBLIC_URL}
    NEXT_PUBLIC_API_URL: ${env:NEXT_PUBLIC_API_URL}
    NEXT_PUBLIC_GOOGLE_AUTH_CLIENT_ID: ${env:NEXT_PUBLIC_GOOGLE_AUTH_CLIENT_ID}
    ACCESS_TOKEN_SECRET: ${env:ACCESS_TOKEN_SECRET}
    REFRESH_TOKEN_SECRET: ${env:REFRESH_TOKEN_SECRET}
    EMAIL_TOKEN_SECRET: ${env:EMAIL_TOKEN_SECRET}
    EMAIL_SERVICE: ${env:EMAIL_SERVICE}
    EMAIL_USER: ${env:EMAIL_USER}
    EMAIL_PASSWORD: ${env:EMAIL_PASSWORD}
    EMAIL_HOST: ${env:EMAIL_HOST}
    EMAIL_PORT: ${env:EMAIL_PORT}
    EMAIL_SECURE: ${env:EMAIL_SECURE}
    EMAIL_SENDER: ${env:EMAIL_SENDER}
    DROP_PASSWORD_TOKEN_SECRET: ${env:DROP_PASSWORD_TOKEN_SECRET}
    GOOGLE_AUTH_CLIENT_ID: ${env:GOOGLE_AUTH_CLIENT_ID}
    GOOGLE_AUTH_CLIENT_SECRET: ${env:GOOGLE_AUTH_CLIENT_SECRET}
    REGION: ${env:REGION}
    ACCESS_KEY_ID: ${env:ACCESS_KEY_ID}
    SECRET_ACCESS_KEY: ${env:SECRET_ACCESS_KEY}
    PUBLIC_BUCKET_NAME: ${env:PUBLIC_BUCKET_NAME}
    DEBUG: ${env:DEBUG}
    LOCAL_DEBUG: ${env:LOCAL_DEBUG}

resources:
  Resources:
    IamRoleLambdaExecution:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  - ${env:MONGO_ARN}
              Action: sts:AssumeRole
              Condition:
                StringEquals:
                  sts:ExternalId:
                    - ${env:MONGO_EXTERNAL_ID}
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole

functions:
  main:
    handler: dist/apps/main/main.handler
    name: ${sls:stage}-main
    description: Main app
    environment:
      NODE_ENV: ${self:provider.stage}

    events:
      # - http:
      #     method: ANY
      #     path: /
      # - http:
      #     method: ANY
      #     path: '{proxy+}'
      - http:
          method: ANY
          path: 'api/main/{proxy+}'

  blog:
    handler: dist/apps/blog/main.handler
    name: ${sls:stage}-blog
    description: Blog app
    environment:
      NODE_ENV: ${self:provider.stage}
    events:
      - http:
          method: ANY
          path: 'api/blog/{proxy+}'
